#include <iostream>
#include <gtest/gtest.h>
#include "ManualRewardMap.h"


TEST(UnitTests,DescendingVsDistance){
    //For the example below, NN path generated with large distance weight should yield a path with total distance 2, 
    //whereas the descending priority approach should yield a path with total distance 3


    std::pair<double,double> site_1_coords={1,0}; //(x,y)
    std::pair<double,double> site_2_coords={2,0};

    double site_1_reward_val=0.2;
    double site_2_reward_val=0.9;


    site_obj manual_site_1;
    manual_site_1.coordinates=site_1_coords;
    manual_site_1.reward_val=site_1_reward_val;

    site_obj manual_site_2;
    manual_site_2.coordinates=site_2_coords;
    manual_site_2.reward_val=site_2_reward_val;


    std::vector<site_obj> list_of_sites={manual_site_1,manual_site_2};

    std::pair<double,double> starting_position={0,0};

    ManualRewardMap manual_reward_map(list_of_sites);
    manual_reward_map.map_side_length_x_=21;
    manual_reward_map.map_side_length_y_=21;
    manual_reward_map.max_x_=2;
    manual_reward_map.max_y_=2;


    manual_reward_map.set_initial_position(starting_position);

    manual_reward_map.generate_map();

    std::pair<std::vector<site_obj>,double>  paths_and_distance_descending_priority=manual_reward_map.generate_paths_descending_priority();
    std::vector<site_obj> paths_descending_priority=paths_and_distance_descending_priority.first;
    double distance_descending_priority=paths_and_distance_descending_priority.second;

    double distance_weight_1=100;
    std::pair<std::vector<site_obj>,double>  paths_and_distance_NN=manual_reward_map.generate_paths_distance_weighted_NN(distance_weight_1);
    std::vector<site_obj> paths_NN=paths_and_distance_NN.first;
    double distance_NN=paths_and_distance_NN.second;
    EXPECT_TRUE(distance_descending_priority==3) << "Descending priority method path length not what was expected. Actual value: " << distance_descending_priority << "\n";
    EXPECT_TRUE(distance_NN==2) << "Nearest neighbor (high distance weight) method path length not what was expected. Actual value: " << distance_NN << "\n";
}



TEST(UnitTests,ZeroWeightDistance){
    //NN path generated with zero distance weight should yield a path equal in length to the one generated by simply going in descending order of priority

    std::pair<double,double> site_1_coords={0.8,0.8}; //(x,y)
    std::pair<double,double> site_2_coords={0.1,0.9};
    std::pair<double,double> site_3_coords={1.5,0.1};
    std::pair<double,double> site_4_coords={1.0,0.3};
    std::pair<double,double> site_5_coords={0.2,1.8};
    std::pair<double,double> site_6_coords={1.7,1.9};

    double site_1_reward_val=0.8;
    double site_2_reward_val=0.2;
    double site_3_reward_val=0.4;
    double site_4_reward_val=0.9;
    double site_5_reward_val=0.71;
    double site_6_reward_val=0.99;

    site_obj manual_site_1;
    manual_site_1.coordinates=site_1_coords;
    manual_site_1.reward_val=site_1_reward_val;

    site_obj manual_site_2;
    manual_site_2.coordinates=site_2_coords;
    manual_site_2.reward_val=site_2_reward_val;

    site_obj manual_site_3;
    manual_site_3.coordinates=site_3_coords;
    manual_site_3.reward_val=site_3_reward_val;

    site_obj manual_site_4;
    manual_site_4.coordinates=site_4_coords;
    manual_site_4.reward_val=site_4_reward_val;

    site_obj manual_site_5;
    manual_site_5.coordinates=site_5_coords;
    manual_site_5.reward_val=site_5_reward_val;

    site_obj manual_site_6;
    manual_site_6.coordinates=site_6_coords;
    manual_site_6.reward_val=site_6_reward_val;

    std::vector<site_obj> list_of_sites={manual_site_1,manual_site_2,manual_site_3,manual_site_4,manual_site_5,manual_site_6};

    std::pair<double,double> starting_position={0,0};

    ManualRewardMap manual_reward_map(list_of_sites);
    manual_reward_map.map_side_length_x_=21;
    manual_reward_map.map_side_length_y_=21;
    manual_reward_map.max_x_=2;
    manual_reward_map.max_y_=2;


    manual_reward_map.set_initial_position(starting_position);

    manual_reward_map.generate_map();

    std::pair<std::vector<site_obj>,double>  paths_and_distance_descending_priority=manual_reward_map.generate_paths_descending_priority();
    std::vector<site_obj> paths_descending_priority=paths_and_distance_descending_priority.first;
    double distance_descending_priority=paths_and_distance_descending_priority.second;

    double distance_weight_1=0.00;
    std::pair<std::vector<site_obj>,double>  paths_and_distance_NN=manual_reward_map.generate_paths_distance_weighted_NN(distance_weight_1);
    std::vector<site_obj> paths_NN=paths_and_distance_NN.first;
    double distance_NN=paths_and_distance_NN.second;

    EXPECT_TRUE(distance_descending_priority==distance_NN) << "Total path distances from descending priority and zero-weight NN approaches weren't equal.\n";
}